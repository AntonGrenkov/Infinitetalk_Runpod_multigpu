import runpod
# from runpod.serverless.utils import rp_upload
import os
import websocket
import base64
import json
import uuid
import logging
import urllib.request
import urllib.parse
import binascii  # –ò–º–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Base64
import subprocess
import time
import librosa
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


server_address = os.getenv('SERVER_ADDRESS', '127.0.0.1')
client_id = str(uuid.uuid4())


def download_file_from_url(url, output_path):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ URL"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é wget
        result = subprocess.run([
            'wget', '-O', output_path, '--no-verbose', '--timeout=30', url
        ], capture_output=True, text=True, timeout=60)

        if result.returncode == 0:
            logger.info(
                f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ URL: {url} -> {output_path}"
            )
            return output_path
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ wget: {result.stderr}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ URL: {result.stderr}")
    except subprocess.TimeoutExpired:
        logger.error("‚ùå –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–µ–∫–ª–æ")
        raise Exception("–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–µ–∫–ª–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")


def save_base64_to_file(base64_data, temp_dir, output_filename):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Base64 –≤ —Ñ–∞–π–ª"""
    try:
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ Base64
        decoded_data = base64.b64decode(base64_data)

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(temp_dir, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        file_path = os.path.abspath(os.path.join(temp_dir, output_filename))
        with open(file_path, 'wb') as f:
            f.write(decoded_data)

        logger.info(f"‚úÖ Base64 –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: '{file_path}'")
        return file_path
    except (binascii.Error, ValueError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64: {e}")


def process_input(input_data, temp_dir, output_filename, input_type):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
    if input_type == "path":
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        logger.info(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏: {input_data}")
        return input_data
    elif input_type == "url":
        # –ï—Å–ª–∏ —ç—Ç–æ URL, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        logger.info(f"üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ URL: {input_data}")
        os.makedirs(temp_dir, exist_ok=True)
        file_path = os.path.abspath(os.path.join(temp_dir, output_filename))
        return download_file_from_url(input_data, file_path)
    elif input_type == "base64":
        # –ï—Å–ª–∏ —ç—Ç–æ Base64, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        logger.info("üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ Base64")
        return save_base64_to_file(input_data, temp_dir, output_filename)
    else:
        raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞: {input_type}")


def queue_prompt(prompt, input_type="image", person_count="single"):
    url = f"http://{server_address}:8188/prompt"
    logger.info(f"Queueing prompt to: {url}")
    p = {"prompt": prompt, "client_id": client_id}
    data = json.dumps(p).encode('utf-8')

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–æ—Ä–∫—Ñ–ª–æ—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥–æ–≤ –≤–æ—Ä–∫—Ñ–ª–æ—É: {len(prompt)}")
    if input_type == "image":
        prompt_284 = (
            prompt.get('284', {})
            .get('inputs', {})
            .get('image', 'NOT_FOUND')
        )
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (284): {prompt_284}")
    else:
        prompt_228 = (
            prompt.get('228', {})
            .get('inputs', {})
            .get('video', 'NOT_FOUND')
        )
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥–∞ –≤–∏–¥–µ–æ (228): {prompt_228}")
    prompt_125 = (
        prompt.get('125', {})
        .get('inputs', {})
        .get('audio', 'NOT_FOUND')
    )
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥–∞ –∞—É–¥–∏–æ (125): {prompt_125}")
    prompt_241 = (
        prompt.get('241', {})
        .get('inputs', {})
        .get('positive_prompt', 'NOT_FOUND')
    )
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (241): {prompt_241}")
    if person_count == "multi":
        if "307" in prompt:
            prompt_307 = (
                prompt.get('307', {})
                .get('inputs', {})
                .get('audio', 'NOT_FOUND')
            )
            logger.info(
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –Ω–æ–¥–∞ –∞—É–¥–∏–æ (307): {prompt_307}"
            )
        elif "313" in prompt:
            prompt_313 = (
                prompt.get('313', {})
                .get('inputs', {})
                .get('audio', 'NOT_FOUND')
            )
            logger.info(
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –Ω–æ–¥–∞ –∞—É–¥–∏–æ (313): {prompt_313}"
            )

    req = urllib.request.Request(url, data=data)
    req.add_header('Content-Type', 'application/json')

    try:
        response = urllib.request.urlopen(req)
        result = json.loads(response.read())
        logger.info(f"–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result}")
        return result
    except urllib.error.HTTPError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.code} - {e.reason}")
        logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {e.read().decode('utf-8')}")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        raise


def get_image(filename, subfolder, folder_type):
    url = f"http://{server_address}:8188/view"
    logger.info(f"Getting image from: {url}")
    data = {"filename": filename, "subfolder": subfolder, "type": folder_type}
    url_values = urllib.parse.urlencode(data)
    with urllib.request.urlopen(f"{url}?{url_values}") as response:
        return response.read()


def get_history(prompt_id):
    url = f"http://{server_address}:8188/history/{prompt_id}"
    logger.info(f"Getting history from: {url}")
    with urllib.request.urlopen(url) as response:
        return json.loads(response.read())


def get_videos(ws, prompt, input_type="image", person_count="single"):
    prompt_id = queue_prompt(prompt, input_type, person_count)['prompt_id']
    output_videos = {}
    while True:
        out = ws.recv()
        if isinstance(out, str):
            message = json.loads(out)
            if message['type'] == 'executing':
                data = message['data']
                if data['node'] is None and data['prompt_id'] == prompt_id:
                    break
        else:
            continue

    history = get_history(prompt_id)[prompt_id]
    for node_id in history['outputs']:
        node_output = history['outputs'][node_id]
        videos_output = []
        if 'gifs' in node_output:
            for video in node_output['gifs']:
                # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ fullpath –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ base64
                with open(video['fullpath'], 'rb') as f:
                    video_data = base64.b64encode(f.read()).decode('utf-8')
                videos_output.append(video_data)
        output_videos[node_id] = videos_output

    return output_videos


def load_workflow(workflow_path):
    with open(workflow_path, 'r') as file:
        return json.load(file)


def get_workflow_path(input_type, person_count):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–æ—Ä–∫—Ñ–ª–æ—É –≤ \
    –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç input_type –∏ person_count"""
    if input_type == "image":
        if person_count == "single":
            return "/I2V_single.json"
        else:  # multi
            return "/I2V_multi.json"
    else:  # video
        if person_count == "single":
            return "/V2V_single.json"
        else:  # multi
            return "/V2V_multi.json"


def get_audio_duration(audio_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    try:
        duration = librosa.get_duration(path=audio_path)
        return duration
    except Exception as e:
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ ({audio_path}): {e}"
        )
        return None


def calculate_max_frames_from_audio(wav_path, wav_path_2=None, fps=25):
    """–í—ã—á–∏—Å–ª—è–µ—Ç max_frames –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ"""
    durations = []

    # –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ –∞—É–¥–∏–æ
    duration1 = get_audio_duration(wav_path)
    if duration1 is not None:
        durations.append(duration1)
        logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∞—É–¥–∏–æ: {duration1:.2f} —Å–µ–∫")

    # –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Ç–æ—Ä–æ–≥–æ –∞—É–¥–∏–æ (–¥–ª—è multi person)
    if wav_path_2:
        duration2 = get_audio_duration(wav_path_2)
        if duration2 is not None:
            durations.append(duration2)
            logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –∞—É–¥–∏–æ: {duration2:.2f} —Å–µ–∫")

    if not durations:
        logger.warning(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ. \
                –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 81."
        )
        return 81

    # –†–∞—Å—á–µ—Ç max_frames –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
    max_duration = max(durations)
    max_frames = int(max_duration * fps) + 81

    logger.info(
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {max_duration:.2f} —Å–µ–∫, \
            –≤—ã—á–∏—Å–ª–µ–Ω–æ max_frames: {max_frames}"
    )
    return max_frames


def handler(job):
    job_input = job.get("input", {})

    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {job_input}")
    task_id = f"task_{uuid.uuid4()}"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–≤–æ–¥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä—Å–æ–Ω
    input_type = job_input.get("input_type", "image")  # image/video
    person_count = job_input.get("person_count", "single")  # single/multi

    logger.info(
        f"–¢–∏–ø –≤–æ—Ä–∫—Ñ–ª–æ—É: {input_type}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: {person_count}"
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –≤–æ—Ä–∫—Ñ–ª–æ—É
    workflow_path = get_workflow_path(input_type, person_count)
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤–æ—Ä–∫—Ñ–ª–æ—É: {workflow_path}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ
    media_path = None
    if input_type == "image":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑: image_path, image_url, image_base64)
        if "image_path" in job_input:
            media_path = process_input(
                job_input["image_path"],
                task_id,
                "input_image.jpg",
                "path"
            )
        elif "image_url" in job_input:
            media_path = process_input(
                job_input["image_url"],
                task_id,
                "input_image.jpg",
                "url"
            )
        elif "image_base64" in job_input:
            media_path = process_input(
                job_input["image_base64"],
                task_id,
                "input_image.jpg",
                "base64"
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            media_path = "/examples/image.jpg"
            logger.info(
                "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /examples/image.jpg"
            )
    else:  # video
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        # (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑: video_path, video_url, video_base64)
        if "video_path" in job_input:
            media_path = process_input(
                job_input["video_path"],
                task_id,
                "input_video.mp4",
                "path"
            )
        elif "video_url" in job_input:
            media_path = process_input(
                job_input["video_url"],
                task_id,
                "input_video.mp4",
                "url"
            )
        elif "video_base64" in job_input:
            media_path = process_input(
                job_input["video_base64"],
                task_id,
                "input_video.mp4",
                "base64"
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # (–µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            media_path = "/examples/image.jpg"
            logger.info(
                "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /examples/image.jpg"
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ
    # (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑: wav_path, wav_url, wav_base64)
    wav_path = None
    wav_path_2 = None  # –í—Ç–æ—Ä–æ–µ –∞—É–¥–∏–æ –¥–ª—è multi person

    if "wav_path" in job_input:
        wav_path = process_input(
            job_input["wav_path"],
            task_id,
            "input_audio.wav", "path"
        )
    elif "wav_url" in job_input:
        wav_path = process_input(
            job_input["wav_url"],
            task_id,
            "input_audio.wav",
            "url"
        )
    elif "wav_base64" in job_input:
        wav_path = process_input(
            job_input["wav_base64"],
            task_id,
            "input_audio.wav",
            "base64"
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        wav_path = "/examples/audio.mp3"
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—É–¥–∏–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /examples/audio.mp3")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∞—É–¥–∏–æ –¥–ª—è multi person
    if person_count == "multi":
        if "wav_path_2" in job_input:
            wav_path_2 = process_input(
                job_input["wav_path_2"],
                task_id,
                "input_audio_2.wav",
                "path"
            )
        elif "wav_url_2" in job_input:
            wav_path_2 = process_input(
                job_input["wav_url_2"],
                task_id, "input_audio_2.wav",
                "url"
            )
        elif "wav_base64_2" in job_input:
            wav_path_2 = process_input(
                job_input["wav_base64_2"],
                task_id,
                "input_audio_2.wav",
                "base64"
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç–∞–∫–æ–µ –∂–µ, –∫–∞–∫ –ø–µ—Ä–≤–æ–µ –∞—É–¥–∏–æ)
            wav_path_2 = wav_path
            logger.info("–í—Ç–æ—Ä–æ–µ –∞—É–¥–∏–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–æ–µ –∞—É–¥–∏–æ.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    prompt_text = job_input.get("prompt", "A person talking naturally")
    width = job_input.get("width", 512)
    height = job_input.get("height", 512)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ max_frame
    # (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ)
    max_frame = job_input.get("max_frame")
    if max_frame is None:
        logger.info(
            "max_frame –Ω–µ —É–∫–∞–∑–∞–Ω. \
            –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ."
        )
        max_frame = calculate_max_frames_from_audio(
            wav_path, wav_path_2 if person_count == "multi" else None
        )
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π max_frame: {max_frame}")

    logger.info(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–∫—Ñ–ª–æ—É: prompt='{prompt_text}', \
            width={width}, height={height}, max_frame={max_frame}"
    )
    logger.info(f"–ü—É—Ç—å –∫ –º–µ–¥–∏–∞: {media_path}")
    logger.info(f"–ü—É—Ç—å –∫ –∞—É–¥–∏–æ: {wav_path}")
    if person_count == "multi":
        logger.info(f"–ü—É—Ç—å –∫–æ –≤—Ç–æ—Ä–æ–º—É –∞—É–¥–∏–æ: {wav_path_2}")

    prompt = load_workflow(workflow_path)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(media_path):
        logger.error(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {media_path}")
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª: {media_path}"}

    if not os.path.exists(wav_path):
        logger.error(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {wav_path}")
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª: {wav_path}"}

    if person_count == "multi" and wav_path_2 \
            and not os.path.exists(wav_path_2):

        logger.error(f"–í—Ç–æ—Ä–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {wav_path_2}")
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Ç–æ—Ä–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª: {wav_path_2}"}

    logger.info(f"–†–∞–∑–º–µ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {os.path.getsize(media_path)} –±–∞–π—Ç")
    logger.info(f"–†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {os.path.getsize(wav_path)} –±–∞–π—Ç")
    if person_count == "multi" and wav_path_2:
        logger.info(
            f"–†–∞–∑–º–µ—Ä –≤—Ç–æ—Ä–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {os.path.getsize(wav_path_2)} –±–∞–π—Ç"
        )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥–æ–≤ –≤–æ—Ä–∫—Ñ–ª–æ—É
    if input_type == "image":
        # –í–æ—Ä–∫—Ñ–ª–æ—É I2V: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        prompt["284"]["inputs"]["image"] = media_path
    else:
        # –í–æ—Ä–∫—Ñ–ª–æ—É V2V: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        prompt["228"]["inputs"]["video"] = media_path

    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    prompt["125"]["inputs"]["audio"] = wav_path
    prompt["241"]["inputs"]["positive_prompt"] = prompt_text
    prompt["245"]["inputs"]["value"] = width
    prompt["246"]["inputs"]["value"] = height

    prompt["270"]["inputs"]["value"] = max_frame

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∞—É–¥–∏–æ –¥–ª—è multi person
    if person_count == "multi":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∞—É–¥–∏–æ –Ω–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ—Ä–∫—Ñ–ª–æ—É
        if input_type == "image":  # –î–ª—è I2V_multi.json
            if "307" in prompt:
                prompt["307"]["inputs"]["audio"] = wav_path_2
        else:  # –î–ª—è V2V_multi.json
            if "313" in prompt:
                prompt["313"]["inputs"]["audio"] = wav_path_2

    ws_url = f"ws://{server_address}:8188/ws?clientId={client_id}"
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {ws_url}")

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    http_url = f"http://{server_address}:8188/"
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {http_url}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 3 –º–∏–Ω—É—Ç—ã)
    max_http_attempts = 180
    for http_attempt in range(max_http_attempts):
        try:
            import urllib.request
            urllib.request.urlopen(http_url, timeout=5)
            logger.info(
                f"HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {http_attempt+1})"
            )
            break
        except Exception as e:
            logger.warning(
                f"HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å \
                    (–ø–æ–ø—ã—Ç–∫–∞ {http_attempt+1}/{max_http_attempts}): {e}"
            )
            if http_attempt == max_http_attempts - 1:
                raise Exception(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É ComfyUI. \
                        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä."
                )
            time.sleep(1)

    ws = websocket.WebSocket()
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket (–º–∞–∫—Å–∏–º—É–º 3 –º–∏–Ω—É—Ç—ã)
    max_attempts = int(180/5)  # 3 –º–∏–Ω—É—Ç—ã (–ø–æ–ø—ã—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
    for attempt in range(max_attempts):
        try:
            ws.connect(ws_url)
            logger.info(
                f"WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})"
            )
            break
        except Exception as e:
            logger.warning(
                f"WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å \
                    (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts}): {e}"
            )
            if attempt == max_attempts - 1:
                raise Exception(
                    "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è WebSocket \
                        —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (3 –º–∏–Ω—É—Ç—ã)"
                )
            time.sleep(5)
    videos = get_videos(ws, prompt, input_type, person_count)
    ws.close()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    for node_id in videos:
        if videos[node_id]:
            return {"video": videos[node_id][0]}

    return {"error": "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}


runpod.serverless.start({"handler": handler})
